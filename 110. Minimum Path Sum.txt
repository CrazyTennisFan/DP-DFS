Given a m x n grid filled with non-negative numbers, find a path from top left to bottom right which minimizes the sum of all numbers along its path.

Notice:

You can only move either down or right at any point in time.

------------------------------------------------------------------------------------------------------------------------------------

Solution 1:  Space O(mn)

public class Solution {
    /**
     * @param grid: a list of lists of integers
     * @return: An integer, minimizes the sum of all numbers along its path
     */
    public int minPathSum(int[][] grid) {
        // write your code here
        if (grid == null || grid.length == 0)
        {
            return 0;
        }
        
        int m = grid.length;
        int n = grid[0].length;
        
        int[][] f = new int[m][n];
        for(int i = 0; i < m; i++)
        {
            for(int j = 0; j < n; j++)
            {
                if(i==0 && j==0)
                {
                    f[i][j] = grid[i][j];
                    continue;
                }
                
                f[i][j] = Integer.MAX_VALUE;
                if(i>0)
                {
                    f[i][j] = Math.min(f[i][j], f[i-1][j]+grid[i][j]);
                }
                
                if(j>0)
                {
                    f[i][j] = Math.min(f[i][j], f[i][j-1]+grid[i][j]);
                }
            }
        }
        
        return f[m-1][n-1];
    }
}


------------------------------------------------------------------------------------------------------------------------------------


Solution 2: Space O(n)  


public class Solution {
    /**
     * @param grid: a list of lists of integers
     * @return: An integer, minimizes the sum of all numbers along its path
     */
    public int minPathSum(int[][] grid) {
        // write your code here
        if (grid == null || grid.length == 0)
        {
            return 0;
        }
        
        int m = grid.length;
        int n = grid[0].length;
        
        int[][] f = new int[2][n];
        int old, now = 0;
        for(int i = 0; i < m; i++)
        {
            old = now;
            now = 1 - now;
            
            for(int j = 0; j < n; j++)
            {
                if(i==0 && j==0)
                {
                    f[now][j] = grid[i][j];
                    continue;
                }
                
                f[now][j] = Integer.MAX_VALUE;
                if(i>0)
                {
                    f[now][j] = Math.min(f[now][j], f[old][j]+grid[i][j]);
                }
                
                if(j>0)
                {
                    f[now][j] = Math.min(f[now][j], f[now][j-1]+grid[i][j]);
                }
            }
        }
        
        return f[now][n-1];
    }
}


------------------------------------------------------------------------------------------------------------------------------------

打印路径：  

Test case:

[[1,5,7,6,8],[4,7,4,4,9],[10,3,2,3,2]]

public class Solution {
    /**
     * @param grid: a list of lists of integers
     * @return: An integer, minimizes the sum of all numbers along its path
     */
    public int minPathSum(int[][] grid) {
        // write your code here
        if (grid == null || grid.length == 0)
        {
            return 0;
        }
        
        int m = grid.length;
        int n = grid[0].length;
        
        int[][] f = new int[m][n];
        int[][] pi = new int[m][n];
        
        for(int i = 0; i < m; i++)
        {
            for(int j = 0; j < n; j++)
            {
                if(i==0 && j==0)
                {
                    f[i][j] = grid[i][j];
                    continue;
                }
                
                f[i][j] = Integer.MAX_VALUE;
                if(i>0)
                {
                    f[i][j] = Math.min(f[i][j], f[i-1][j]);
                    if(f[i][j] == f[i-1][j])
                    {
                        pi[i][j] = 1;   // come from up
                    }
                }
                
                if(j>0)
                {
                    f[i][j] = Math.min(f[i][j], f[i][j-1]);
                    if(f[i][j] == f[i][j-1])
                    {
                        pi[i][j] = 2;   // come from left
                    }
                }
                
                f[i][j] += grid[i][j];
            }
        }
        
        int[] path = new int[m+n-1];
        int x = m-1;
        int y = n-1;
        for(int i = m+n-2; i>=0; i--)
        {
            path[i] = grid[x][y];
            if(i > 0)
            {
                if(pi[x][y] == 1)
                {
                    x--;
                }
                else
                {
                    y--;
                }
            }
        }
        
        for(int i = 0; i < path.length; i++)
        {
            System.out.print(path[i]);
            System.out.print("--->");
        }
        
        System.out.println();
        
        return f[m-1][n-1];
    }
}

