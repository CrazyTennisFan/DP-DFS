Given a 2D grid, each cell is either a wall 'W', an enemy 'E' or empty '0' (the number zero), 
return the maximum enemies you can kill using one bomb.
The bomb kills all the enemies in the same row and column from the planted point 
until it hits the wall since the wall is too strong to be destroyed.

Notice:

You can only put the bomb at an empty cell.


Example
Given a grid:

0 E 0 0
E 0 W E
0 E 0 0
return 3. (Placing a bomb at (1,1) kills 3 enemies)


------------------------------------------------------------------------------------------------------------


public class Solution {
    /**
     * @param grid: Given a 2D grid, each cell is either 'W', 'E' or '0'
     * @return: an integer, the maximum enemies you can kill using one bomb
     */
    public int maxKilledEnemies(char[][] grid) {
        // write your code here
        if (grid == null || grid.length == 0)
        {
            return 0;
        }
        
        int row = grid.length;
        int col = grid[0].length;
        
        int[][] up = new int[row][col];
        int[][] down = new int[row][col];
        int[][] left = new int[row][col];
        int[][] right = new int[row][col];
        
        computeUpGrid(up, grid, row, col);
        computeDownGrid(down, grid, row, col);
        computeLeftGrid(left, grid, row, col);
        computeRightGrid(right, grid, row, col);
        
        int result = 0;
        for(int i = 0; i < row; i++)
        {
            for(int j = 0; j < col; j++)
            {
                if(grid[i][j] == '0')
                {
                    result = Math.max(result, up[i][j] + down[i][j] + left[i][j] + right[i][j]);
                }
            }
        }
        
        return result;
    }
    
    
     private void computeRightGrid(int[][] arr, char[][] grid, int row, int col)
    {
        for(int i = 0; i < row; i++)
        {
            for(int j = col-1; j >= 0; j--)
            {
                if(grid[i][j] == 'W')
                {
                    arr[i][j] = 0;
                }
                else if(grid[i][j] == 'E')
                {
                    if(j == col-1)
                    {
                        arr[i][j] = 1;
                    }
                    else
                    {
                        arr[i][j] = arr[i][j+1] + 1;
                    }
                }
                else
                {
                    if(j == col-1)
                    {
                        arr[i][j] = 0;
                    }
                    else
                    {
                        arr[i][j] = arr[i][j+1];
                    }
                }
            }
        }
    }
    
    
    private void computeLeftGrid(int[][] arr, char[][] grid, int row, int col)
    {
        for(int i = 0; i < row; i++)
        {
            for(int j = 0; j < col; j++)
            {
                if(grid[i][j] == 'W')
                {
                    arr[i][j] = 0;
                }
                else if(grid[i][j] == 'E')
                {
                    if(j == 0)
                    {
                        arr[i][j] = 1;
                    }
                    else
                    {
                        arr[i][j] = arr[i][j-1] + 1;
                    }
                }
                else
                {
                    if(j == 0)
                    {
                        arr[i][j] = 0;
                    }
                    else
                    {
                        arr[i][j] = arr[i][j-1];
                    }
                }
            }
        }
    }
    
    
    private void computeDownGrid(int[][] arr, char[][] grid, int row, int col)
    {
        for(int i = row-1; i >= 0; i--)
        {
            for(int j = 0; j < col; j++)
            {
                if(grid[i][j] == 'W')
                {
                    arr[i][j] = 0;
                }
                else if(grid[i][j] == 'E')
                {
                    if(i == row-1)
                    {
                        arr[i][j] = 1;
                    }
                    else
                    {
                        arr[i][j] = arr[i+1][j] + 1;
                    }
                }
                else
                {
                    if(i == row-1)
                    {
                        arr[i][j] = 0;
                    }
                    else
                    {
                        arr[i][j] = arr[i+1][j];
                    }
                }
            }
        }
    }
    
    
    private void computeUpGrid(int[][] arr, char[][] grid, int row, int col)
    {
        for(int i = 0; i < row; i++)
        {
            for(int j = 0; j < col; j++)
            {
                if(grid[i][j] == 'W')
                {
                    arr[i][j] = 0;
                }
                else if(grid[i][j] == 'E')
                {
                    if(i == 0)
                    {
                        arr[i][j] = 1;
                    }
                    else
                    {
                        arr[i][j] = arr[i-1][j] + 1;
                    }
                }
                else
                {
                    if(i == 0)
                    {
                        arr[i][j] = 0;
                    }
                    else
                    {
                        arr[i][j] = arr[i-1][j];
                    }
                }
            }
        }
    }
    
    
}