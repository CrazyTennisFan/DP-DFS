Given a list of numbers that may has duplicate numbers, return all possible subsets

Notice:

Each element in a subset must be in non-descending order.
The ordering between two subsets is free.
The solution set must not contain duplicate subsets.


Example
If S = [1,2,2], a solution is:

[
  [2],
  [1],
  [1,2,2],
  [2,2],
  [1,2],
  []
]


------------------------------------------------------------------------------------------------

Solution 1:  DFS

public class Solution {
    /**
     * @param nums: A set of numbers.
     * @return: A list of lists. All valid subsets.
     */
    public List<List<Integer>> subsetsWithDup(int[] nums) {
        // write your code here
        List<List<Integer>> results = new ArrayList<>();
        if (nums == null)
        {
            return results;
        }
        Arrays.sort(nums);
        
        dfs(results, new ArrayList<>(), 0, nums, new boolean[nums.length]);
        
        return results;
    }
    
    private void dfs(List<List<Integer>> results, List<Integer> subset, int startIndex, int[] nums, boolean[] visited)
    {
        results.add(new ArrayList<>(subset));
        
        for(int i = startIndex; i < nums.length; i++)
        {
            if (i > startIndex && nums[i] == nums[i-1] && visited[i-1] == false)
            {
                continue;
            }
            
            subset.add(nums[i]);
            visited[i] = true;
            dfs(results, subset, i+1, nums, visited);
            visited[i] = false;
            subset.remove(subset.size()-1);
        }
    }
}


------------------------------------------------------------------------------------------------


Solution 2: Iterative version

public class Solution {
    /**
     * @param nums: A set of numbers.
     * @return: A list of lists. All valid subsets.
     */
    public List<List<Integer>> subsetsWithDup(int[] nums) {
        // write your code here
        
        Arrays.sort(nums);
        List<List<Integer>> res = new LinkedList<List<Integer>>();
        res.add(new LinkedList<Integer>());
        if(nums == null || nums.length == 0){
            return res;
        }
        
        List<List<Integer>> prev = new LinkedList<List<Integer>>();
        
        for(int i = 0; i < nums.length; i++){
            List<List<Integer>> temp = new LinkedList<List<Integer>>();
            if(i > 0 && nums[i] == nums[i - 1]){
                for(List<Integer> sub : prev){
                    List<Integer> toAdd = new LinkedList<Integer>(sub);
                    toAdd.add(nums[i]);
                    temp.add(new LinkedList<Integer>(toAdd));
                }
            }else{
                for(List<Integer> sub : res){
                    List<Integer> toAdd = new LinkedList<Integer>(sub);
                    toAdd.add(nums[i]);
                    temp.add(new LinkedList<Integer>(toAdd));
                }
            }
            res.addAll(new LinkedList<List<Integer>>(temp));
            prev = new LinkedList<List<Integer>>(temp);
        }
        
        return res;
    }
}
