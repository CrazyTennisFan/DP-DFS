Given n items with size nums[i] which an integer array and 
all positive numbers. An integer target denotes the size of a backpack. Find the number of possible fill the backpack.

Each item may only be used once

Example
Given candidate items [1,2,3,3,7] and target 7,

A solution set is: 
[7]
[1, 3, 3]
return 2


－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－

Solution 1: O(nm) Space

public class Solution {
    /**
     * @param nums: an integer array and all positive numbers
     * @param target: An integer
     * @return: An integer
     */
    public int backPackV(int[] nums, int target) {
        // write your code here
        if(nums == null || nums.length == 0)
        {
            return 0;
        }
        
        int n = nums.length;
        int[][] f = new int[n+1][target+1];
        for(int i = 0; i <= target; i++)
        {
            f[0][i] = 0;
        }
        
        f[0][0] = 1;
        
        for(int i = 1; i <= n; i++)
        {
            for(int j = 0; j <= target; j++)
            {
                f[i][j] = f[i-1][j];
                if(j - nums[i-1] >= 0)
                {
                    f[i][j] += f[i-1][j-nums[i-1]];
                }
            }
        }
        
        return f[n][target];
    }
}


－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－

Solution 2 : Better Space