After robbing those houses on that street, the thief has found himself a new place for his thievery 
so that he will not get too much attention. This time, all houses at this place are arranged in a circle. 
That means the first house is the neighbor of the last one. 
Meanwhile, the security system for these houses remain the same as for those in the previous street.

Given a list of non-negative integers representing the amount of money of each house, 
determine the maximum amount of money you can rob tonight without alerting the police.

Notice:
This is an extension of House Robber.

—————————————————————————————————————————————————


public class Solution {
    /**
     * @param nums: An array of non-negative integers.
     * @return: The maximum amount of money you can rob tonight
     */
    public int houseRobber2(int[] nums) {
        // write your code here
        if(nums == null || nums.length == 0)
        {
            return 0;
        }
        
        if(nums.length == 1)
        {
            return nums[0];
        }
        
        int len = nums.length;
        
        int[] A = new int[len-1];
        for(int i = 0; i < A.length; i++)
        {
            A[i] = nums[i];
        }
        
        int res1 = houseRobber(A);
        
        for(int i = 0; i < A.length; i++)
        {
            A[i] = nums[i+1];
        }
        
        int res2 = houseRobber(A);
        
        return Math.max(res1, res2);
        
    }
    
    
    private int houseRobber(int[] A) {
        // write your code here
    
        
        int n = A.length;
        int result, preresult;
        preresult = 0;
        result = A[0];
        int cur;
        
        for(int i = 2; i <= n; i++)
        {
            cur = Math.max(result, preresult + A[i-1]);
            preresult = result;
            result = cur;
        }
        
        return result;
    }
}