Given a sequence of integers, find the longest increasing subsequence (LIS).

You code should return the length of the LIS.


Example
For [5, 4, 1, 2, 3], the LIS is [1, 2, 3], return 3
For [4, 2, 4, 5, 3, 7], the LIS is [2, 4, 5, 7], return 4


——————————————————————————————————

Solution 1: O(n^2) Time

public class Solution {
    /**
     * @param nums: An integer array
     * @return: The length of LIS (longest increasing subsequence)
     */
    public int longestIncreasingSubsequence(int[] nums) {
        // write your code here
        if (nums == null || nums.length == 0)
        {
            return 0;
        }
        
        int n = nums.length;
        int[] f = new int[n];
        for(int i = 0; i < n; i++)
        {
            f[i] = 1;
            for(int j = 0; j < i; j++)
            {
                if(nums[i] > nums[j])
                {
                    f[i] = Math.max(f[i], f[j]+1);
                }
            }
        }
        
        int res = 0;
        for(int i = 0; i < n; i++)
        {
            res = Math.max(res, f[i]);
        }
        
        return res;
    }
}