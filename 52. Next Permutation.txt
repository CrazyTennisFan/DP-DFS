Given a list of integers, which denote a permutation.

Find the next permutation in ascending order.

Notice:
The list may contains duplicate integers.

Example
For [1,3,2,3], the next permutation is [1,3,3,2]

For [4,3,2,1], the next permutation is [1,2,3,4]

————————————————————————————

public class Solution {
    /**
     * @param nums: A list of integers
     * @return: A list of integers
     */
    public int[] nextPermutation(int[] nums) {
        // write your code here
        if(nums == null || nums.length == 0)
        {
            return nums;
        }
        
        int index = increasingSequence(nums);
        
        if( index == -1)
        {
            reverse(nums, 0, nums.length-1);
            return nums;
        }
        
        int findIndex = index+1;
        while(findIndex < nums.length)
        {
            if(nums[index] >= nums[findIndex])
            {
                break;
            }
            else
            {
                findIndex++;
            }
        }
        
        int t = nums[index];
        nums[index] = nums[findIndex-1];
        nums[findIndex-1] = t;
        reverse(nums, index+1, nums.length-1);
        
        return nums;
        
    }
    
    private int increasingSequence(int[] nums)
    {
        int index = nums.length-2;
        while(index >= 0)
        {
            if(nums[index] < nums[index+1])
            {
                break;
            }
            index--;
        }
        return index;
    }
    
    private void reverse(int[] nums, int start, int end)
    {
        while(start < end)
        {
            int t = nums[start];
            nums[start] = nums[end];
            nums[end] = t;
            start++;
            end--;
        }
    }
}