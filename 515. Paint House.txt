There are a row of n houses, each house can be painted with one of the three colors: red, blue or green. 
The cost of painting each house with a certain color is different. 
You have to paint all the houses such that no two adjacent houses have the same color.

The cost of painting each house with a certain color is represented by a n x 3 cost matrix. 
For example, costs[0][0] is the cost of painting house 0 with color red; 
costs[1][2] is the cost of painting house 1 with color green, and so on... Find the minimum cost to paint all houses.

Notice:

All costs are positive integers.

Example
Given costs = [[14,2,11],[11,14,5],[14,3,10]] return 10

house 0 is blue, house 1 is green, house 2 is blue, 2 + 5 + 3 = 10


--------------------------------------------------------------------------------------


public class Solution {
    /**
     * @param costs: n x 3 cost matrix
     * @return: An integer, the minimum cost to paint all houses
     */
    public int minCost(int[][] costs) {
        // write your code here
        if(costs == null || costs.length == 0)
        {
            return 0;
        }
        
        int n = costs.length;
        int m = costs[0].length;
        
        int[][] f = new int[n+1][m];
        int i, j;
        for(i = 0; i < m; i++)
        {
            f[0][i] = 0;
        }
        
        for(i = 1; i <=n; i++)
        {
            for(j = 0; j < m; j++)
            {
                f[i][j] = Integer.MAX_VALUE;
                for(int k = 0; k < m; k++)
                {
                    if( j == k)
                    {
                        continue;
                    }
                    
                    f[i][j] = Math.min(f[i][j], f[i-1][k]+costs[i-1][j]);
                }
            }
        }
        
        
        int res = Integer.MAX_VALUE;
        for(i = 0; i < m; i++)
        {
            res = Math.min(res, f[n][i]);
        }
        
        return res;
    }
}