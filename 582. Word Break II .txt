Given a string s and a dictionary of words dict, 
add spaces in s to construct a sentence where each word is a valid dictionary word.

Return all such possible sentences.

Example
Gieve s = lintcode,
dict = ["de", "ding", "co", "code", "lint"].

A solution is ["lint code", "lint co de"].

———————————————————————————————————————————


public class Solution {
    /*
     * @param s: A string
     * @param wordDict: A set of words.
     * @return: All possible sentences.
     */
    public List<String> wordBreak(String s, Set<String> wordDict) {
        // write your code here
        if(s == null)
        {
            return new ArrayList<>();
        }
        
        Map<String, ArrayList<String>> map = new HashMap<>();
        
        return dfs(s, wordDict, map);
    }
    
    private ArrayList<String> dfs(String s, 
                                  Set<String> dict, 
                                  Map<String, ArrayList<String>> memo)
    {
        if (memo.containsKey(s))
        {
            return memo.get(s);
        }
        
        ArrayList<String> result = new ArrayList<>();
        if (s.length() == 0)
        {
            return result;
        }
        
        if(dict.contains(s))
        {
            result.add(s);
        }
        
        for(int i = 1; i < s.length(); i++)
        {
            String word = s.substring(0, i);
            if (!dict.contains(word)) {
                continue;
            }
            
            String suffix = s.substring(i);
            ArrayList<String> segmentations = dfs(suffix, dict, memo);
            
            for (String segmentation: segmentations){
                result.add(word + " " + segmentation);
            }
        }
        
        memo.put(s, result);
        return result;
    }
}