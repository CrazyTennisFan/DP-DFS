Find the contiguous subarray within an array (containing at least one number) which has the largest product.


Example
For example, given the array [2,3,-2,4], the contiguous subarray [2,3] has the largest product = 6.

----------------------------------------------------------------------------------------------------------------

Solution 1:   O(n) Space

public class Solution {
    /*
     * @param nums: An array of integers
     * @return: An integer
     */
    public int maxProduct(int[] nums) {
        // write your code here
        int n = nums.length;
        
        int[] f = new int[n];
        int[] g = new int[n];
        
        for(int i = 0; i < n; i++)
        {
            f[i] = nums[i];
            if (i > 0)
            {
                f[i] = Math.max(f[i], nums[i] * f[i-1]);
                f[i] = Math.max(f[i], nums[i] * g[i-1]);
            }
            
            g[i] = nums[i];
            if (i > 0)
            {
                g[i] = Math.min(g[i], nums[i] * f[i-1]);
                g[i] = Math.min(g[i], nums[i] * g[i-1]);
            }
            
        }
        
        int res = Integer.MIN_VALUE;
        
        for(int i = 0; i < n; i++)
        {
            res = Math.max(res, f[i]);
        }
        
        return res;
        
    }
}



----------------------------------------------------------------------------------------------------------------

Solution 2:

public class Solution {
    /*
     * @param nums: An array of integers
     * @return: An integer
     */
    public int maxProduct(int[] nums) {
        // write your code here
        int n = nums.length;
        
        int[] f = new int[n];
        int[] g = new int[n];
        
        for(int i = 0; i < n; i++)
        {
            f[i] = nums[i];
            if (i > 0)
            {
                if (f[i] >= 0)
                {
                    f[i] = Math.max(f[i], nums[i] * f[i-1]);    
                }
                else
                {
                    f[i] = Math.max(f[i], nums[i] * g[i-1]);    
                }
                
                
            }
            
            g[i] = nums[i];
            if (i > 0)
            {
                if(g[i] >= 0)
                {
                    g[i] = Math.min(g[i], nums[i] * g[i-1]);    
                }
                else
                {
                    g[i] = Math.min(g[i], nums[i] * f[i-1]);    
                }
                
            }
            
        }
        
        int res = Integer.MIN_VALUE;
        
        for(int i = 0; i < n; i++)
        {
            res = Math.max(res, f[i]);
        }
        
        return res;
        
    }
}



----------------------------------------------------------------------------------------------------------------


Solution 3:  O(1) Space

public class Solution {
    /**
     * @param nums: an array of integers
     * @return: an integer
     */
    public int maxProduct(int[] nums) {
        // write your code here
        if (nums == null || nums.length == 0) {
            return 0;
        }
        int minPre = nums[0], maxPre = nums[0];
        int max = nums[0], min = nums[0];
        int res = nums[0];
        for (int i = 1; i < nums.length; i ++) {
            max = Math.max(nums[i], Math.max(maxPre * nums[i], minPre * nums[i]));
            min = Math.min(nums[i], Math.min(maxPre * nums[i], minPre * nums[i]));
            res = Math.max(res, max);
            maxPre = max;
            minPre = min;
        }
        return res;
    }
}



