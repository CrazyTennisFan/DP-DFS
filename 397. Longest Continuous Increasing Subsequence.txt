Give an integer arrayï¼Œfind the longest increasing continuous subsequence in this array.

An increasing continuous subsequence:

Can be from right to left or from left to right.
Indices of the integers in the subsequence should be continuous.


Notice:
  O(n) time and O(1) extra space.


Example
For [5, 4, 2, 1, 3], the LICS is [5, 4, 2, 1], return 4.
For [5, 1, 2, 3, 4], the LICS is [1, 2, 3, 4], return 4.


-----------------------------------------------------------------------------------------------

Solution 1: O(n) Space

public class Solution {
    /**
     * @param A: An array of Integer
     * @return: an integer
     */
    public int longestIncreasingContinuousSubsequence(int[] A) {
        // write your code here
        if (A == null || A.length == 0)
        {
            return 0;
        }
        
        int n = A.length;
        int[] f = new int[n];
        
        int max = 1;
        max = Math.max(max, getLongest(f, A));
        
        reverse(A);
        
        max = Math.max(max, getLongest(f, A));
        
        return max;
        
    }
    
    private int getLongest(int[] f, int[] A)
    {
        f[0] = 1;
        int max = 1;
        
        for(int i = 1; i < A.length; i++)
        {
            f[i] = 1;
            if(A[i] > A[i-1])
            {
                f[i] = f[i-1] + 1;
                
            }
            max = Math.max(max, f[i]);
        }
        
        return max;
    }
    
    private void reverse(int[] A)
    {
        int start = 0;
        int end = A.length-1;
        while(start < end)
        {
            int t = A[start];
            A[start] = A[end];
            A[end] = t;
            start++;
            end--;
        }
    }
    
    
}



-----------------------------------------------------------------------------------------------

Solution 2: O(1) Space

public class Solution {
    /**
     * @param A: An array of Integer
     * @return: an integer
     */
    public int longestIncreasingContinuousSubsequence(int[] A) {
        // write your code here
        if (A == null || A.length == 0)
        {
            return 0;
        }
        
        int max = 1;
        
        max = Math.max(max, getLongest(A));
        
        reverse(A);
        
        max = Math.max(max, getLongest(A));
        
        return max;
        
    }
    
    private int getLongest(int[] A)
    {
        int preMax = 1;
        int max = 1;
        
        for(int i = 1; i < A.length; i++)
        {
            int curMax = 1;
            if(A[i] > A[i-1])
            {
                curMax = preMax + 1;
            }
            max = Math.max(max, curMax);
            preMax = curMax;
        }
        
        return max;
    }
    
    private void reverse(int[] A)
    {
        int start = 0;
        int end = A.length-1;
        while(start < end)
        {
            int t = A[start];
            A[start] = A[end];
            A[end] = t;
            start++;
            end--;
        }
    }
    
    
}