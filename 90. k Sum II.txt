Given n unique integers, number k (1<=k<=n) and target.
Find all possible k integers where their sum is target.

Example
Given [1,2,3,4], k = 2, target = 5. Return:

[
  [1,4],
  [2,3]
]


-----------------------------------------------------------------------


public class Solution {
    /*
     * @param A: an integer array
     * @param k: a postive integer <= length(A)
     * @param targer: an integer
     * @return: A list of lists of integer
     */
    public List<List<Integer>> kSumII(int[] A, int k, int targer) {
        // write your code here
        List<List<Integer>> results = new ArrayList<>();
        if (A == null || A.length == 0)
        {
            return results;
        }
        
        Arrays.sort(A);
        
        dfs(results, new ArrayList<>(), 0, k, targer, A);
        
        return results;
    }
    
    
    private void dfs(List<List<Integer>> results, List<Integer> subset, int startIndex, int k, int target, int[] nums)
    {
        if(subset.size() == k)
        {
            if (target == 0)
            {
                results.add(new ArrayList<>(subset));
            }
            return;    
        }
        
        
        for(int i = startIndex; i < nums.length; i++)
        {
            subset.add(nums[i]);
            dfs(results, subset, i+1, k, target-nums[i], nums);
            subset.remove(subset.size()-1);
        }
        
    }
}