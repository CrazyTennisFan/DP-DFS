Given a collection of candidate numbers (C) and a target number (T), find all unique combinations in C where the candidate numbers sums to T.

Each number in C may only be used once in the combination.

Notice:

All numbers (including target) will be positive integers.
Elements in a combination (a1, a2, … , ak) must be in non-descending order. (ie, a1 ≤ a2 ≤ … ≤ ak).
The solution set must not contain duplicate combinations.


Example
Given candidate set [10,1,6,7,2,1,5] and target 8,

A solution set is:

[
  [1,7],
  [1,2,5],
  [2,6],
  [1,1,6]
]


---------------------------------------------------------------------------------------------------------

public class Solution {
    /**
     * @param num: Given the candidate numbers
     * @param target: Given the target number
     * @return: All the combinations that sum to target
     */
    public List<List<Integer>> combinationSum2(int[] num, int target) {
        // write your code here
        List<List<Integer>> results = new ArrayList<>();
        if(num == null || num.length == 0)
        {
            return results;
        }
        
        Arrays.sort(num);
        
        dfs(results, new ArrayList<>(), 0, num, target);
        
        return results;
    }
    
    private void dfs(List<List<Integer>> results, 
                     List<Integer> subset, 
                     int startIndex, 
                     int[] nums, 
                     int target)
    {
        for(int i = startIndex; i < nums.length; i++)
        {
            if(i != startIndex && nums[i] == nums[i-1])
            {
                continue;
            }
            
            if(nums[i] > target)
            {
                break;
            }
            
            if(nums[i] == target)
            {
                List<Integer> newset = new ArrayList<>(subset);
                newset.add(nums[i]);
                results.add(newset);
                break;
            }
            
            
            subset.add(nums[i]);
            dfs(results, subset, i+1, nums, target-nums[i]);
            subset.remove(subset.size()-1);
           
        }
    }
}