Say you have an array for which the ith element is the price of a given stock on day i.

Design an algorithm to find the maximum profit. You may complete at most k transactions.

Example
Given prices = [4,4,6,1,1,4,2,5], and k = 2, return 6.

Challenge 
O(nk) time.


－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－


public class Solution {
    /**
     * @param K: An integer
     * @param prices: An integer array
     * @return: Maximum profit
     */
    public int maxProfit(int K, int[] prices) {
        // write your code here
        if (prices == null || prices.length == 0)
        {
            return 0;
        }
        
        int n = prices.length;
        
        if (K > n /2)
        {
            int temp = 0;
            for(int i = 1; i < n; i++)
            {
                temp += Math.max(0, prices[i] - prices[i-1]);
            }
            
            return temp;
        }
        
        
        int[][] f = new int[n+1][2*K+1+1];
        for(int i = 1; i <= 2*K+1; i++)
        {
            f[0][i] = Integer.MIN_VALUE;
        }
        
        f[0][1] = 0;
        
        for(int i = 1; i <= n; i++)
        {
            for(int j = 1; j <= 2*K+1; j +=2)
            {
                f[i][j] = f[i-1][j];
                if (i>1 && j>1 && f[i-1][j-1] != Integer.MIN_VALUE){
                    f[i][j] = Math.max(f[i][j], f[i-1][j-1] + prices[i-1] - prices[i-2]);
                }                    
            }
            
            for(int j = 2; j <= 2*K+1; j +=2)
            {
                f[i][j] = f[i-1][j-1];
                if (i>1 && f[i-1][j] != Integer.MIN_VALUE){
                    f[i][j] = Math.max(f[i][j], f[i-1][j] + prices[i-1] - prices[i-2]);
                }                    
            }
        }
        
        int res = 0;
        for(int i = 1; i <=2*K+1; i += 2)
        {
            res = Math.max(res, f[n][i]);
        }
        
        return res;
    }
}