Given a string, find all permutations of it without duplicates.

Example
Given "abb", return ["abb", "bab", "bba"].

Given "aabb", return ["aabb", "abab", "baba", "bbaa", "abba", "baab"].


————————————————————————————————————


public class Solution {
    /**
     * @param str: A string
     * @return: all permutations
     */
    public List<String> stringPermutation2(String str) {
        // write your code here
        List<String> results = new ArrayList<>();
        if (str == null)
        {
            return results;
        }
        
        char[] s = str.toCharArray();
        Arrays.sort(s);
        
        dfs(results, s, new boolean[s.length], new ArrayList<Character>());
        
        return results;
    }
    
    private void dfs(List<String> results, char[] s, boolean[] visited, List<Character> l)
    {
        if(l.size() == s.length)
        {
            String result = "";
            for(char c : l)
            {
                result += c + "";
            }
            results.add(result);
            return;
        }
        
        for(int i = 0; i < s.length; i++)
        {
            if(visited[i])
            {
                continue;
            }
            
            if(i > 0 && s[i] == s[i-1] && !visited[i-1])
            {
                continue;
            }
            
            l.add(s[i]);
            visited[i] = true;
            dfs(results, s, visited, l);
            visited[i] = false;
            l.remove(l.size()-1);
        }
    }
}