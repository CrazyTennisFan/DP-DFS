Given n items with size Ai and value Vi, and a backpack with size m. 
What's the maximum value can you put into the backpack?

Notice：

You cannot divide item into small pieces and the total size of items you choose should smaller or equal to m.


Example
Given 4 items with size [2, 3, 5, 7] and value [1, 5, 2, 4], 
and a backpack with size 10. The maximum value is 9.

－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－

Solution 1: O(n*m) Space

public class Solution {
    /**
     * @param m: An integer m denotes the size of a backpack
     * @param A: Given n items with size A[i]
     * @param V: Given n items with value V[i]
     * @return: The maximum value
     */
    public int backPackII(int m, int[] A, int[] V) {
        // write your code here
        int n = A.length;
        
        int[][] f = new int[n+1][m+1];
        f[0][0] = 0;
        for(int i = 1; i <= m; i++)
        {
            f[0][i] = -1;
        }
        
        for(int i = 1; i <= n; i++)
        {
            for(int j = 0; j <= m; j++)
            {
                f[i][j] = f[i-1][j];
                if(j - A[i-1] >= 0 && f[i-1][j-A[i-1]] != -1)
                {
                    f[i][j] = Math.max(f[i][j], f[i-1][j-A[i-1]] + V[i-1]);
                }
            }
        }
        
        int res = 0;
        for(int i = 0; i <= m; i++)
        {
            res = Math.max(res, f[n][i]);
        }
        
        return res;
    }
}


－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－

Solution 2: O(m) Space

public class Solution {
    /**
     * @param m: An integer m denotes the size of a backpack
     * @param A: Given n items with size A[i]
     * @param V: Given n items with value V[i]
     * @return: The maximum value
     */
    public int backPackII(int m, int[] A, int[] V) {
        // write your code here
        int n = A.length;
        
        int[][] f = new int[2][m+1];
        
        f[0][0] = 0;
        for(int i = 1; i <= m; i++)
        {
            f[0][i] = -1;
        }
        
        int old, now = 0;
        
        for(int i = 1; i <= n; i++)
        {
            old = now;
            now = 1 - now;
            
            for(int j = 0; j <= m; j++)
            {
                f[now][j] = f[old][j];
                if(j - A[i-1] >= 0 && f[old][j-A[i-1]] != -1)
                {
                    f[now][j] = Math.max(f[now][j], f[old][j-A[i-1]] + V[i-1]);
                }
            }
        }
        
        int res = 0;
        for(int i = 0; i <= m; i++)
        {
            res = Math.max(res, f[now][i]);
        }
        
        return res;
    }
}












