Say you have an array for which the ith element is the price of a given stock on day i.

Design an algorithm to find the maximum profit. You may complete at most two transactions.


Example
Given an example [4,4,6,1,1,4,2,5], return 6.


————————————————————————————————————————————————————

Solution 1: O(n) Space

public class Solution {
    /**
     * @param prices: Given an integer array
     * @return: Maximum profit
     */
    public int maxProfit(int[] prices) {
        // write your code here
        if(prices == null || prices.length == 0)
        {
            return 0;
        }
        
        int n = prices.length;
        int[][] f = new int[n+1][5+1];
        for(int i = 1; i <= 5; i++)
        {
            f[0][i] = Integer.MIN_VALUE;
        }
        f[0][1] = 0;
        
        for(int i = 1; i <= n; i++)
        {
            //for the 1, 3, 5 
            //f[i][j] = max(f[i-1][j], f[i-1][j-1] + Pi-1 - Pi-2)
            for(int j = 1; j <= 5; j+=2)
            {
                f[i][j] = f[i-1][j];
                if(i > 1 && j > 1 && f[i-1][j-1] != Integer.MIN_VALUE)
                {
                    f[i][j] = Math.max(f[i][j], f[i-1][j-1] + prices[i-1] - prices[i-2]);    
                }
                
            }
            
            //for the 2,4 
            //f[i][j] = max(f[i-1][j-1], f[i-1][j] + Pi-1 - Pi-2)
            for(int j = 2; j <= 5; j+=2)
            {
                f[i][j] = f[i-1][j-1];
                if(i > 1 && f[i-1][j] != Integer.MIN_VALUE)
                {
                    f[i][j] = Math.max(f[i][j], f[i-1][j] + prices[i-1] - prices[i-2]);    
                }
            }
        }
        
        int res = 0;
        for(int i = 1; i <= 5; i+=2)
        {
            res = Math.max(res, f[n][i]);
        }
        
        return res;
        
    }
}