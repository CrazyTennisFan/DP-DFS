Follow up for "Unique Paths":

Now consider if some obstacles are added to the grids. How many unique paths would there be?

An obstacle and empty space is marked as 1 and 0 respectively in the grid.

For example,
There is one obstacle in the middle of a 3x3 grid as illustrated below.

[
  [0,0,0],
  [0,1,0],
  [0,0,0]
]
The total number of unique paths is 2.

-----------------------------------------------------------------------------------------------------

public class Solution {
    /**
     * @param obstacleGrid: A list of lists of integers
     * @return: An integer
     */
    public int uniquePathsWithObstacles(int[][] obstacleGrid) {
        // write your code here
        if (obstacleGrid == null || obstacleGrid.length == 0)
        {
            return 0;
        }
        
        int m = obstacleGrid.length;
        int n = obstacleGrid[0].length;
        
        int[][] f = new int[m][n];
        for(int i = 0; i < m; i++)
        {
            for(int j = 0; j < n; j++)
            {
                if(obstacleGrid[i][j] == 1)
                {
                    f[i][j] = 0;
                    continue;
                }
                
                if(i == 0 && j == 0)
                {
                    f[i][j] = 1;
                    continue;
                }
                
                f[i][j] = 0;
                if(i>0)
                {
                    f[i][j] += f[i-1][j];
                }
                
                if(j>0)
                {
                    f[i][j] += f[i][j-1];
                }
            }
        }
        
        return f[m-1][n-1];
    }
}
