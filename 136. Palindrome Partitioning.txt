Given a string s, partition s such that every substring of the partition is a palindrome.

Return all possible palindrome partitioning of s.


Example
Given s = "aab", return:

[
  ["aa","b"],
  ["a","a","b"]
]


--------------------------------------------------------------------------------

Solution 1:

public class Solution {
    /*
     * @param s: A string
     * @return: A list of lists of string
     */
    public List<List<String>> partition(String s) {
        // write your code here
        List<List<String>> results = new ArrayList<>();
        if (s == null)
        {
            return results;
        }
        
        dfs(results, new ArrayList<>(), 0, s);
        
        return results;
    }
    
    private void dfs(List<List<String>> results, List<String> subset, int startIndex, String s)
    {
        if (startIndex == s.length())
        {
            results.add(new ArrayList<>(subset));
            return;
        }
        
        for(int i = startIndex; i < s.length(); i++)
        {
            if(!isPalinDrome(startIndex, i, s))
            {
                continue;
            }
            
            subset.add(s.substring(startIndex, i+1));
            dfs(results, subset, i+1, s);
            subset.remove(subset.size()-1);
        }
    }
    
    private boolean isPalinDrome(int start, int end, String s)
    {
        while(start < end)
        {
            if(s.charAt(start) != s.charAt(end))
            {
                return false;
            }
            start++;
            end--;
        }
        
        return true;
    }
}